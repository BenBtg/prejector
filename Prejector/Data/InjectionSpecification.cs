//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Xml.Serialization;

// 
// This source code was auto-generated by xsd, Version=4.0.30319.1.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
[System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
public partial class InjectionSpecification
{

    private string namespaceField;

    private InjectionSpecificationNamespace[] namespacesField;

    private InjectionSpecificationFolderExclude[] folderExcludesField;

    private InjectionSpecificationBaseType[] excludeField;

    private InjectionSpecificationInjection[] injectionsField;

    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string Namespace
    {
        get
        {
            return this.namespaceField;
        }
        set
        {
            this.namespaceField = value;
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlArrayAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    [System.Xml.Serialization.XmlArrayItemAttribute("Namespace", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
    public InjectionSpecificationNamespace[] Namespaces
    {
        get
        {
            return this.namespacesField;
        }
        set
        {
            this.namespacesField = value;
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlArrayAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    [System.Xml.Serialization.XmlArrayItemAttribute("FolderExclude", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
    public InjectionSpecificationFolderExclude[] FolderExcludes
    {
        get
        {
            return this.folderExcludesField;
        }
        set
        {
            this.folderExcludesField = value;
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlArrayAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    [System.Xml.Serialization.XmlArrayItemAttribute("BaseType", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public InjectionSpecificationBaseType[] Exclude
    {
        get
        {
            return this.excludeField;
        }
        set
        {
            this.excludeField = value;
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlArrayAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    [System.Xml.Serialization.XmlArrayItemAttribute("Injection", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
    public InjectionSpecificationInjection[] Injections
    {
        get
        {
            return this.injectionsField;
        }
        set
        {
            this.injectionsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
public partial class InjectionSpecificationNamespace : IConditional
{

    private bool debugOnlyField;

    private bool debugOnlyFieldSpecified;

    private string valueField;

    private string conditionField;

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public bool DebugOnly
    {
        get
        {
            return this.debugOnlyField;
        }
        set
        {
            this.debugOnlyField = value;
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool DebugOnlySpecified
    {
        get
        {
            return this.debugOnlyFieldSpecified;
        }
        set
        {
            this.debugOnlyFieldSpecified = value;
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlTextAttribute()]
    public string Value
    {
        get
        {
            return this.valueField;
        }
        set
        {
            this.valueField = value;
        }
    }

    public string Name
    {
        get
        {
            return this.Value;
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string Condition
    {
        get
        {
            return this.conditionField;
        }
        set
        {
            this.conditionField = value;
        }
    }

}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
public partial class InjectionSpecificationFolderExclude : IConditional
{

    private string conditionField;

    private string valueField;

    public string Name
    {
        get
        {
            return this.Value;
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string Condition
    {
        get
        {
            return this.conditionField;
        }
        set
        {
            this.conditionField = value;
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlTextAttribute()]
    public string Value
    {
        get
        {
            return this.valueField;
        }
        set
        {
            this.valueField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
public partial class InjectionSpecificationBaseType
{

    private string valueField;

    /// <remarks/>
    [System.Xml.Serialization.XmlTextAttribute()]
    public string Value
    {
        get
        {
            return this.valueField;
        }
        set
        {
            this.valueField = value;
        }
    }
}

public interface IConditional
{
    string Name { get; }

    string Condition { get; }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
public partial class InjectionSpecificationInjection : IConditional
{

    private string providerField;

    private string concreteField;

    private InjectionSpecificationInjectionConstructorArgument[] constructorArgumentField;

    private InjectionSpecificationInjectionInterface[] interfaceField;

    private bool singletonField;

    private bool singletonFieldSpecified;

    private bool noScanField;

    private bool noScanFieldSpecified;

    private string conditionField;

    private bool debugOnlyField;

    private bool debugOnlyFieldSpecified;

    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string Provider
    {
        get
        {
            return this.providerField;
        }
        set
        {
            this.providerField = value;
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string Concrete
    {
        get
        {
            return this.concreteField;
        }
        set
        {
            this.concreteField = value;
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("ConstructorArgument", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = true)]
    public InjectionSpecificationInjectionConstructorArgument[] ConstructorArgument
    {
        get
        {
            return this.constructorArgumentField;
        }
        set
        {
            this.constructorArgumentField = value;
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("Interface", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = true)]
    public InjectionSpecificationInjectionInterface[] Interface
    {
        get
        {
            return this.interfaceField;
        }
        set
        {
            this.interfaceField = value;
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public bool Singleton
    {
        get
        {
            return this.singletonField;
        }
        set
        {
            this.singletonField = value;
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool SingletonSpecified
    {
        get
        {
            return this.singletonFieldSpecified;
        }
        set
        {
            this.singletonFieldSpecified = value;
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public bool NoScan
    {
        get
        {
            return this.noScanField;
        }
        set
        {
            this.noScanField = value;
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool NoScanSpecified
    {
        get
        {
            return this.noScanFieldSpecified;
        }
        set
        {
            this.noScanFieldSpecified = value;
        }
    }

    public string Name
    {
        get
        {
            return this.ConcreteClassName;
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string Condition
    {
        get
        {
            return this.conditionField;
        }
        set
        {
            this.conditionField = value;
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public bool DebugOnly
    {
        get
        {
            return this.debugOnlyField;
        }
        set
        {
            this.debugOnlyField = value;
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool DebugOnlySpecified
    {
        get
        {
            return this.debugOnlyFieldSpecified;
        }
        set
        {
            this.debugOnlyFieldSpecified = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
public partial class InjectionSpecificationInjectionConstructorArgument
{

    private string nameField;

    private string valueField;

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string name
    {
        get
        {
            return this.nameField;
        }
        set
        {
            this.nameField = value;
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlTextAttribute()]
    public string Value
    {
        get
        {
            return this.valueField;
        }
        set
        {
            this.valueField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
public partial class InjectionSpecificationInjectionInterface
{

    private string valueField;

    /// <remarks/>
    [System.Xml.Serialization.XmlTextAttribute()]
    public string Value
    {
        get
        {
            return this.valueField;
        }
        set
        {
            this.valueField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
[System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
public partial class NewDataSet
{
    partial class NamespaceDataTable
    {
    }

    private InjectionSpecification[] itemsField;

    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("InjectionSpecification")]
    public InjectionSpecification[] Items
    {
        get
        {
            return this.itemsField;
        }
        set
        {
            this.itemsField = value;
        }
    }
}
